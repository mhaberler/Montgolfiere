{
  "name": "my-project",
  "version": "1.0.0",
  "scripts": {
    "my-script": "MY_BUNDLE_VERSION=$(jq -r '.bundle' bundle.json) && echo \"Running with bundle version: $MY_BUNDLE_VERSION\" && some-command --version $MY_BUNDLE_VERSION",
    "another-script": "some-other-command --bundle-id=$(jq -r '.bundle' bundle.json)"
  }
}
(.venv) MacBookPro capacitor/Montgolfiere bundle-version $ jq -r '.config.bundle' package.json
1.5.47
(.venv) MacBookPro capacitor/Montgolfiere bundle-version $ jq -r '.bundle' bundle.json       
1.5.10


import fs from "fs";
const pkg = JSON.parse(fs.readFileSync("./package.json", "utf-8"));
const [major, minor, patch] = pkg.version.split(".").map(Number);
pkg.config.bundle = `${major}.${minor}.${patch + 1}`;
fs.writeFileSync("./package.json", JSON.stringify(pkg, null, 2));


// ideas are:
// the builtin bundle has the same version as the app
// any uppdate bundle must have:
// - a semver greater than the app version
// - a semver greater than the last bundle version (by patch number)

// the bundle semver is kept int pkg.config.bundleversion

// on next-bundle creation:

// set baseline to 0.0.0

// read pkg.version
// if it does not exist, set to 1.0.0

// read pkg.config.bundleversion
//  if does not exist set baseline to pkg.version
//  if it exists, use it as baseline

// compare baseline and pkg.version
// if baseline is less than pkg.version:
//    set baseline to  pkg.version


// increase baseline patch by 1 and save as pkg.config.bundleversion

// write back to package.json with new pkg.config.bundleversion

// build with     "zipit": "npx @capgo/cli@latest bundle zip com.haberler.montgolfiere --path ./dist.capgo.development -b $npm_package_config_bundle "
